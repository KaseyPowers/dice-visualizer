@top Program { statement* }

@top Expressions { simpleExpression | SimpleExpression { simpleExpression? ";" }+ }

@precedence {
  prefix,
  times @left,
  add @left
}


@skip {} {
  String[isolate] {
    stringEnd stringContent* stringEnd
  }
  Dice {
    diceShorthand expression
  }
  prefixExpression {
    !prefix (
      plusMin
    ) expression
  }
}

statement[@isGroup=Statement] {
  String
}

outputConfig {
  String
}

simpleExpression { expression outputConfig?}

expression[@isGroup=Expression] {
  Identifier |
  Digit | 
  Dice |
  Array |  
  ParenthesisExpression | 
  UnaryExpression |
  BinaryExpression
}

commaSep<content> { "" | content ("," content)* }

Range { Digit ".." Digit }

Array {
  "[" commaSep<Digit | Range> "]"
}
ParenthesisExpression { "(" expression ")"}

UnaryExpression {
  prefixExpression
}
// unarySpaced

BinaryExpression {
  expression !times (divide | ArithOp<"%"> | ArithOp<"*">) expression |
  expression !add plusMin expression
}


@skip { space | LineComment }

plusMin { ArithOp<"+" | "-">}

@tokens {

  ArithOp<expr> {expr}

  Digit { @digit+ }

  diceShorthand { "d" }
  Identifier { $[a-ce-zA-Z_]  $[a-zA-Z0-9_\-]* }
  // @precedence{Identifier, diceShorthand}

  // Boolean { "true" | "false" }
  divide[@name=ArithOp] {"/"}
  LineComment[isolate] { "//" ![\n]* }
  @precedence{LineComment, divide}

  space { @whitespace+ }

  stringEnd { '"' }
  stringContent { !["\n] | "\\\"" } 

  // "(" ")"
}

@detectDelim